<%- include('layout/header') %>
<style>
  * {
    box-sizing: border-box;
  }

  body {
    font-family: 'Roboto', sans-serif;
    background-color: #f4f4f4;
    color: #333;
    margin-left: 15pc;
  }

  h1 {
    text-align: center;
    margin: 4rem 0;
    color: #2c3e50;
    font-size: 2rem;
  }

  h2 {
    margin-top: 2rem;
    color: #34495e;
    font-size: 1.5rem;
    border-bottom: 2px solid #e74c3c;
    padding-bottom: 0.5rem;
  }

  form {
    margin: 0 auto;
    padding: 1.5rem;
    background-color: #fff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    width: 100%;
  }

  form ul {
    padding: 0;
  }

  form ul li {
    list-style: none;
    margin: 1rem 0;
    display: flex;
    align-items: center;
    background-color: #ecf0f1;
    padding: 1rem;
    border-radius: 8px;
    transition: box-shadow 0.2s;
    overflow-x: auto;
  }

  form ul li:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  form ul li label {
    display: flex;
    align-items: center;
    cursor: pointer;
    width: 100%;
  }

  form ul li img {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    margin-right: 1rem;
  }

  form ul li input[type="radio"] {
    margin-right: 1rem;
  }

  .candidate-name {
    font-size: 1.2rem;
    font-weight: bold;
    margin-right: auto;
  }

  .candidate-party {
    font-size: 1rem;
    color: #7f8c8d;
  }

  #submit_btn,
  #submit_bt {
    display: block;
    width: 100%;
    padding: 0.8rem;
    background-color: #3498db;
    color: #fff;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  #submit_btn:hover,
  #submit_bt:hover {
    background-color: #2980b9;
  }

  #notification-box {
    position: fixed;
    top: 10px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #27ae60;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    z-index: 1000;
    font-size: 1rem;
    text-align: center;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  @media (max-width: 768px) {
    body {
      margin-left: 0;
    }

    form {
      padding: 1rem;
    }

    h1 {
      font-size: 1.8rem;
      margin-top: 10rem;
    }

    h2 {
      font-size: 1.3rem;
    }

    form ul li {
      flex-direction: column;
      align-items: flex-start;
    }

    form ul li img {
      margin-bottom: 0.5rem;
    }

    #submit_btn,
    #submit_bt {
      font-size: 0.9rem;
    }
  }
</style>
</head>
<body>
  <header>
    <%- include('./layout/sidebar') -%>
    <%- include('./layout/navbar') -%>
  </header>

  <div id="notification-box" style="display: none;">
    <p id="notification-message"></p>
  </div>

  <% if ((role === 'Super Admin' || role === 'Admin') && current > end && current <= admin_end) { %>
    <section>
      <form action="/local-vote-count" method="post" id="localvoteForm" enctype="multipart/form-data">
        <h1>Enter Local Vote Counts</h1>
        <div style="padding: 1rem; background: #ffeaa7; color: #2d3436; border-radius: 5px;">
          This section is only accessible to admins after the voting period. Use it to manually input vote counts.
        </div>
        <input type="hidden" name="electionID" id="electionID" value="<%= userElectionID %>">

        <% if (Object.keys(groupedCandidates).length === 0) { %>
          <p class="text-center text-muted">
            <img src="/images/noCandidate.png" alt="No candidates available">
            <br>
            There are no candidates available for voting in this election.
          </p>
        <% } else { %>
          <ul>
            <% Object.keys(groupedCandidates).forEach(position => { %>
              <h2><%= position %></h2>
              <% if (groupedCandidates[position].length === 0) { %>
                <p class="text-center text-muted">No candidates available for the <%= position %> position.</p>
              <% } else { %>
                <% groupedCandidates[position].forEach(candidate => { %>
                  <li>
                    <label>
                      <img src="data:image/png;base64,<%= candidate.photo %>" alt="Candidate photo">
                      <span class="candidate-name">
                        <%= candidate.first_name %> <%= candidate.middle_name %> <%= candidate.last_name %>
                      </span>
                      <span class="candidates">
                        <input type="number" name="votes[<%= candidate.id %>]" placeholder="Enter number of local votes" required>
                      </span>
                    </label>
                  </li>
                <% }) %>
              <% } %>
            <% }); %>
          </ul>
          <button type="submit" id="submit_bt">Submit Vote Counts</button>
        <% } %>
      </form>
    </section>

  <% } else if (current < start || current > end) { %>
    <form action="/vote" method="post" id="voteForm" enctype="multipart/form-data">
      <h1>Vote Candidate</h1>
<p style="text-align: center; font-size: 1rem; color: #555; margin-top: -1rem; margin-bottom: 2rem;">
  Please select your preferred candidate for each position listed below. You can only vote once, so choose carefully.
</p>
      <p id="timer" style="font-size: 18px; font-weight: bold;color: red;"></p>
      <input type="hidden" name="electionID" id="electionID" value="<%= userElectionID %>">
      <div style="padding: 1rem; background: #ffeaa7; color: #2d3436; border-radius: 5px;">
        <p>Voting process only allowed between <%= new Date(start).toUTCString() %> <b>To</b> <%= new Date(end).toUTCString() %>.</p>
      </div>
      <button type="submit" id="submit_btn" disabled>Submit Your Vote</button>
    </form>

  <% } else { %>
    <form action="/vote" method="post" id="voteForm" enctype="multipart/form-data">
      <h1>Vote Candidate</h1>
<p style="text-align: center; font-size: 1rem; color: #555; margin-top: -1rem; margin-bottom: 2rem;">
  Please select your preferred candidate for each position listed below. You can only vote once, so choose carefully.
</p>
      <p id="timer" style="font-size: 18px; font-weight: bold;color: red;"></p>
      <input type="hidden" name="electionID" id="electionID" value="<%= userElectionID %>">

      <% if (Object.keys(groupedCandidates).length === 0) { %>
        <p class="text-center text-muted">
          <img src="/images/noCandidate.png" alt="no candidate">
          <br>
          No candidates available for voting in this election.
        </p>
      <% } else { %>
        <ul>
          <% Object.keys(groupedCandidates).forEach(position => { %>
            <h2><%= position %></h2>
            <% if (groupedCandidates[position].length === 0) { %>
              <p class="text-center text-muted">No candidates available for the <%= position %> position.</p>
            <% } else { %>
              <% groupedCandidates[position].forEach(candidate => { %>
                <li>
                  <label>
                    <img src="data:image/png;base64,<%= candidate.photo %>" alt="Candidate photo">
                    <input type="radio" name="<%= position %>" value="<%= candidate.id %>" required>
                    <span class="candidate-name"><%= candidate.first_name %> <%= candidate.middle_name %> <%= candidate.last_name %></span>
                    <span class="candidate-party">(<%= candidate.party %>)</span>
                  </label>
                </li>
              <% }) %>
            <% } %>
          <% }); %>
        </ul>
        <button type="submit" id="submit_btn">Submit Your Vote</button>
      <% } %>
    </form>
  <% } %>

  <script>
    const startTime = new Date("<%= start %>").getTime();
    const endTime = new Date("<%= end %>").getTime();

    function updateTimer() {
      const now = new Date().getTime();
      const timerElement = document.getElementById('timer');

      if (now >= startTime && now <= endTime) {
        const elapsed = now - startTime;
        const duration = endTime - startTime;
        const percentage = Math.min((elapsed / duration) * 100, 100);

        const hours = Math.floor((elapsed / (1000 * 60 * 60)) % 24);
        const minutes = Math.floor((elapsed / (1000 * 60)) % 60);
        const seconds = Math.floor((elapsed / 1000) % 60);

        const color = `rgb(${255 - (percentage * 2.55)}, ${percentage * 2.55}, 0)`;

        timerElement.innerText =
          `Time elapsed: ${hours.toString().padStart(2, '0')}h:${minutes.toString().padStart(2, '0')}m:${seconds.toString().padStart(2, '0')}s`;
        timerElement.style.color = color;
      } else if (now > endTime) {
        timerElement.innerText = "Voting period is over.";
      }
    }

    updateTimer();
    setInterval(updateTimer, 1000);
  </script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const submitButton = document.getElementById('submit_btn');
      const voteForm = document.getElementById('voteForm');
      if (voteForm && submitButton) {
        const radioButtons = voteForm.querySelectorAll('input[type="radio"]');
        if (radioButtons.length === 0) {
          submitButton.style.display = 'none';
        } else {
          submitButton.disabled = true;
          radioButtons.forEach(radio => {
            radio.addEventListener('change', () => {
              submitButton.disabled = false;
            });
          });
        }
      }
    });
  </script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const unreadCount = <%= unreadCount %>;
      if (unreadCount > 0) {
        const notificationBox = document.getElementById('notification-box');
        const notificationMessage = document.getElementById('notification-message');

        notificationMessage.textContent = `You have ${unreadCount} new notification(s).`;
        notificationBox.style.display = 'block';

        setTimeout(() => {
          notificationBox.style.display = 'none';
        }, 5000);
      }
    });
  </script>

  <script>
    const localVoteForm = document.getElementById('localvoteForm');
    if (localVoteForm) {
      localVoteForm.addEventListener('submit', async function (e) {
        e.preventDefault();

        const result = await Swal.fire({
          title: 'Submit Vote Counts?',
          text: "Are you sure you want to submit these vote counts?",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#2ecc71',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, submit'
        });

        if (result.isConfirmed) {
          const formData = new FormData(this);
          try {
            const res = await fetch(this.action, {
              method: this.method,
              body: formData
            });

            const data = await res.json();
            if (res.ok) {
              Swal.fire('Success!', data.message, 'success');
              this.reset();
            } else {
              Swal.fire('Error', data.error || 'Something went wrong.', 'error');
            }
          } catch (err) {
            console.error(err);
            Swal.fire('Error', 'Could not submit the form.', 'error');
          }
        }
      });
    }
  </script>

  <script src="/js/vote.js"></script>
  <%- include('layout/footer') %>
